<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="io.github.howiefh.jeews.modules.sys.dao.DictDao">
    <resultMap id="BaseResultMap" type="Dict">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="value" property="value" jdbcType="VARCHAR"/>
        <result column="label" property="label" jdbcType="VARCHAR"/>
        <result column="type" property="type" jdbcType="VARCHAR"/>
        <result column="description" property="description" jdbcType="VARCHAR"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
        <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP"/>
        <association property="createdBy" javaType="User">
            <id property="id" column="created_by"/>
        </association>
        <association property="updatedBy" javaType="User">
            <id property="id" column="updated_by"/>
        </association>
    </resultMap>

    <sql id="dictColumns">
        id,
        value,
        label,
        type,
        description,
        created_by,
        created_at,
        updated_by,
        updated_at
    </sql>

    <sql id="dictWhere">
        <where>
            <if test="param.type != null and param.type != ''">
                type = #{param.type}
            </if>
        </where>
    </sql>
    <insert id="save" useGeneratedKeys="true" keyProperty="id" parameterType="Dict">
        insert
        into sys_dict (id, value, label, type,
        description, created_by, created_at,
        updated_by, updated_at)
        values (
        #{id,jdbcType=BIGINT},
        #{value,jdbcType=VARCHAR},
        #{label,jdbcType=VARCHAR},
        #{type,jdbcType=VARCHAR},
        #{description,jdbcType=VARCHAR},
        #{createdBy.id,jdbcType=BIGINT},
        #{createdAt,jdbcType=TIMESTAMP},
        #{updatedBy.id,jdbcType=BIGINT},
        #{updatedAt,jdbcType=TIMESTAMP}
        )
    </insert>

    <select id="findOne" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="dictColumns"/>
        from sys_dict
        where id = #{id,jdbcType=BIGINT}
    </select>

    <select id="countBy" resultType="long">
        select count(0)
        from sys_dict
        <include refid="dictWhere"/>
    </select>

    <select id="count" resultType="long">
        select count(0) from sys_dict
    </select>

    <select id="findAll" resultMap="BaseResultMap">
        select
        <include refid="dictColumns"/>
        from sys_dict
    </select>

    <select id="findPage" resultMap="BaseResultMap">
        select *
        from sys_dict
        order by id
        limit #{offset}, #{pageSize}
    </select>

    <select id="findPageBy" resultMap="BaseResultMap">
        select
        <include refid="dictColumns"/>
        from sys_dict
        <include refid="dictWhere"/>
        order by
        <foreach item="item" collection="page.sort" separator=",">
            ${item.property} ${item.direction}
        </foreach>
        limit #{page.offset}, #{page.pageSize}
    </select>

    <select id="findTypes" resultType="java.lang.String">
        select type
        from sys_dict
        group by type
        order by type
    </select>

    <update id="update" parameterType="Dict">
        update sys_dict
        set value = #{value,jdbcType=VARCHAR},
        label = #{label,jdbcType=VARCHAR},
        type = #{type,jdbcType=VARCHAR},
        description = #{description,jdbcType=VARCHAR},
        updated_by = #{updatedBy.id,jdbcType=BIGINT},
        updated_at = #{updatedAt,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=BIGINT}
    </update>

    <delete id="delete" parameterType="java.lang.Long">
        delete from sys_dict
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <delete id="deleteBatch" parameterType="java.util.List">
        delete from sys_dict
        where id in
        <foreach item="item" index="index" collection="ids" open="("
                 separator="," close=")">
            #{item}
        </foreach>
    </delete>
</mapper>